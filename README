Small helper to dump stuff in SQLite DBs.

Examples:

>>> # OutputType import is optional. IntEnum allows 1, 2, 3 as options. 
>>> from sqlitedb import DB, OutputType
>>> testing = DB("testing.db") # more details below
>>> # will create the table, defaults to False. Returns True if len(input) == records inserted.
>>> testing.insert_namedtuple("table_np", list_of_nt, create=True)
True	
>>> # table name is CSV file name minus extension. It will be returned from the method
>>> testing.insert_csv("some data.csv") 
'some_data'
>>> # will go over the list and "normalize" the dicts, so that they all have the same keys. Returns True if len(input) == records inserted.
>>> testing.insert_dicts("table_dicts", list_of_dicts) 
True
>>> testing.list_tables()
('table_np', 'some_data', 'table_dicts') 
>>> # can return list of dicts, tuples, or namedtuples. Default can be set:
>>> testing.default_output_type
<OutputType.namedtuple: 1>
>>> # the output type is overrideable for a single query() call
>>> testing.query("SELECT * FROM table_np WHERE some_col = ?", params=('yeah',), output_type=OutputType.dict)


If the database doesn't exist in the path specified, it is created. If the parameter is not a full path, then the DB will be created in "~/.sqlitedb".
There's a rowcount() method that will execute() or executemany() if a list of params is provided.

Type inference is made easy given how flexible SQLite is:
-Numbers: the column is created as INTEGER or FLOAT.
-bytes or memoryview: column is a BLOB. Memoryviews are returned from sqlite3.Binary too.
-date is mapped to DATE, datetime to TIMESTAMP
-Everything else: column is text

This convenience is not available for CSVs, all types are TEXT because everything is read as a string.


Contributors:
Sebastián Monía - http://github.com/sebasmonia

